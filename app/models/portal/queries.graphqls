query blockchains($active: Boolean, $sortOrder: SortOrder) {
  blockchains(active: $active, sortOrder: $sortOrder) {
    id
    ticker
    blockchain
    blockchainAliases
    active
    description
    enforceResult
    chainIDCheck
    logLimitBlocks
    path
  }
}

query getUserJWT($username: String!, $password: String!) {
  getUserJWT(username: $username, password: $password)
}

query getPortalUserID {
  getPortalUserID
}

query getPortalUser {
  getPortalUser {
    portalUserID
    email
    iconURL
    signedUp
    updatesProduct
    updatesMarketing
    betaTester
  }
}

query getUserAccount(
  $accountID: ID!
  $accepted: Boolean!
  $sortOrder: SortOrder
  $roleNameFilters: [RoleName!]
) {
  getUserAccount(
    accountID: $accountID
    accepted: $accepted
    sortOrder: $sortOrder
    roleNameFilters: $roleNameFilters
  ) {
    id
    name
    planType
    enterpriseLimit
    notifications {
      notificationType
      notificationSettings {
        accountID
        type
        active
        destination
        trigger
        events {
          full
          half
          quarter
          signedUp
          threeQuarters
        }
      }
    }
    users {
      id
      email
      roleName
      accepted
    }
    partnerChainIDs
    partnerThroughputLimit
    partnerAppLimit
    integrations {
      stripeSubscriptionID
      covalentAPIKeyFree
      covalentAPIKeyPaid
    }
    createdAt
    updatedAt
    deleted
    portalApps {
      id
      name
      accountID
      appEmoji
      description
      settings {
        appID
        environment
        secretKey
        secretKeyRequired
        favoritedChainIDs
      }
      whitelists {
        origins
        userAgents
        blockchains
        contracts {
          blockchainID
          contracts
        }
        methods {
          blockchainID
          methods
        }
      }
      aats {
        protocolAppID
        aat {
          id
          appID
          publicKey
          address
          clientPublicKey
          signature
          version
        }
      }
      createdAt
      updatedAt
      deleted
    }
    plan {
      id
      type
      chainIDs
      monthlyRelayLimit
      throughputLimit
      appLimit
      dailyLimit
    }
  }
}
query getUserAccountStripeId($accountID: ID!) {
  getUserAccount(accountID: $accountID, accepted: true) {
    id
    integrations {
      stripeSubscriptionID
    }
  }
}

query getUserAccounts(
  $sortOrder: SortOrder
  $roleNameFilters: [RoleName!]
  $accepted: Boolean!
) {
  getUserAccounts(
    sortOrder: $sortOrder
    roleNameFilters: $roleNameFilters
    accepted: $accepted
  ) {
    id
    name
    planType
    portalApps {
      id
      name
    }
    users {
      id
      email
      roleName
      accepted
    }
  }
}

query getUserPortalApp($portalAppID: ID!, $accountID: ID!) {
  getUserPortalApp(portalAppID: $portalAppID, accountID: $accountID) {
    id
    name
    accountID
    appEmoji
    description
    settings {
      appID
      environment
      secretKey
      secretKeyRequired
      favoritedChainIDs
    }
    whitelists {
      origins
      userAgents
      blockchains
      contracts {
        blockchainID
        contracts
      }
      methods {
        blockchainID
        methods
      }
    }
    aats {
      protocolAppID
      aat {
        id
        appID
        publicKey
        address
        clientPublicKey
        signature
        version
      }
    }
    createdAt
    updatedAt
    deleted
  }
}

query getUserPortalApps($sortOrder: SortOrder) {
  getUserPortalApps(sortOrder: $sortOrder) {
    id
    name
    accountID
    appEmoji
    description
  }
}

query getD2ChainsData($params: D2GetChainsParams!) {
  getD2ChainsData(params: $params) {
    meta {
      payloadSize
      currentPage
      totalPages
      currentOffset
    }
    data {
      chainID
    }
  }
}

query getD2StatsData($params: D2GetStatsParams!) {
  getD2StatsData(params: $params) {
    meta {
      payloadSize
      currentPage
      totalPages
      currentOffset
    }
    data {
      month
      week
      dateTime
      accountID
      applicationID
      chainID
      method
      successCount
      errorCount
      totalCount
      successRate
      avgLatency
    }
  }
}

query getD2LogsData($params: D2GetLogsParams!) {
  getD2LogsData(params: $params) {
    meta {
      payloadSize
      currentPage
      totalPages
      currentOffset
    }
    data {
      accountID
      applicationID
      chainID
      errorCode
      errorName
      errorMessage
      isError
      requestDataSize
      relayStartTs
      relayReturnTs
      relayRoundTripTime
      TS
      chainMethods {
        name
        count
      }
    }
  }
}

#query getD2StatsData($params: D2GetStatsParams!) {
#  getD2StatsData(params: $params) {
#    meta {
#      payloadSize
#      currentPage
#      totalPages
#      currentOffset
#    }
#    data {
#      month
#      week
#      date
#      hour
#      accountID
#      applicationID
#      chainID
#      method
#      successCount
#      errorCount
#      totalCount
#      successRate
#      avgLatency
#    }
#  }
#}
